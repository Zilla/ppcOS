/* Copyright (c) 2011, Joakim Ã–stlund
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *    * The name of the author may not be used to endorse or promote products
 *      derived from this software without specific prior written permission. 
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


/* Define memory locations for text and data */

MEMORY
{
	data	: ORIGIN = 0x00F00000, LENGTH = 0x0070000
	heap	: ORIGIN = 0x00F70000, LENGTH = 0x0090000
	text	: ORIGIN = 0x01000000, LENGTH = 0x0100000
}

/* Define program entry point */

ENTRY(_start)

/* Define regions for linked file */

SECTIONS
{
	/* .data section contains static data (e.g. strings etc) */
	.data :
	{
		*(.data)
		*(.data.*)
		*(.rodata)
	} > data

	.heap :
	AT ( ADDR(.data) + SIZEOF (.data) )
	{
		heap_low = .;
		. = . + 0x80000;
		heap_top = .;
		. = . + (0x10000 - 0x10); /* 64k stack */
		stack_top = .;
	} > heap
	/* .text contains compiled code */
	.text :
	{
		*(.start)
		*(.text)
		*(.text.*)
		*(.init)
		*(.fini)
	} > text

	/* Put C++ constructors and destructors at the end of the text block */
	.ctors : 
	{
		*(.ctors)
		*(.ctors.*)
	} > text

	.dtors : 
	{
		*(.dtors)
		*(.dtors.*)
	} > text
}